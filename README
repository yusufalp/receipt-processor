# Receipt Processor

A webservice built with Node and Express

## Developers

### Preparation

Make sure to check `git`, `node` and `npm` applications are installed on your machine by running the following commands:

- `git -v` or `git --version`
- `node -v` or `node --version`
- `npm -v` or `npm --version`

If you see a version number, they are installed. If there is no version number displayed or a message like `command not found` is displayed, they are not installed on your machine.

Check the following websites to install them.

- [Install Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
- [Install Node](https://nodejs.org/en) (for both node and npm)

### Installation

- Clone this repository to your local machine by running the following command:
  - `git clone https://github.com/yusufalp/receipt-processor.git`
- Install dependencies by running the following command:
  - `npm install`

### Running

- Run the service by running the following command:
  - `npx nodemon app.js`

The service will be running on `localhost` on port `8080`, at http://localhost:8080

Note: Feel free to change this port number by changing the `PORT` variable [here](https://github.com/yusufalp/receipt-processor/blob/7418479232532c1ba8d888afe350aca613345a4f/app.js#L11)

## Summary of API Specification

### Endpoint: Process Receipt

- Path: `/receipts/process`
- Method: `POST`
- Payload: Receipt JSON
- Response: JSON containing an id for the receipt.

Description: Takes in a JSON receipt and returns a JSON object with an ID for the receipt.

Example Payload:

```json
{
  "retailer": "Target",
  "purchaseDate": "2022-01-01",
  "purchaseTime": "13:01",
  "items": [
    {
      "shortDescription": "Mountain Dew 12PK",
      "price": "6.49"
    },
    {
      "shortDescription": "Emils Cheese Pizza",
      "price": "12.25"
    },
    {
      "shortDescription": "Knorr Creamy Chicken",
      "price": "1.26"
    },
    {
      "shortDescription": "Doritos Nacho Cheese",
      "price": "3.35"
    },
    {
      "shortDescription": "   Klarbrunn 12-PK 12 FL OZ  ",
      "price": "12.00"
    }
  ],
  "total": "35.35"
}
```

Example Response:

```json
{ "id": "7fb1377b-b223-49d9-a31a-5a02701dd310" }
```

### Endpoint: Get Points

- Path: `/receipts/{id}/points`
- Method: `GET`
- Response: A JSON object containing the number of points awarded.

Description: A simple Getter endpoint that looks up the receipt by the ID and returns an object specifying the points awarded. The `id` parameter should be an ID that is returned from `/receipts/process` after a receipt is processed.

Example Response:

```json
{ "points": 32 }
```

## Examples

You can use `curl` or an application like "Postman" to test the endpoints

### Example 1:

#### Request

```curl
curl -X POST http://localhost:8080/receipts/process \
-H "Content-Type: application/json" \
-d '{
  "retailer": "Walgreens",
  "purchaseDate": "2022-01-02",
  "purchaseTime": "08:13",
  "total": "2.65",
  "items": [
    { "shortDescription": "Pepsi - 12-oz", "price": "1.25" },
    { "shortDescription": "Dasani", "price": "1.40" }
  ]
}'
```

### Response

```json
{ "id": "d4328b4a-0995-405f-a5bf-020441f2e6f4" }
```

### Example 2:

#### Request

```curl
curl -X GET http://localhost:8080/receipts/{id}/points \
-H "Content-Type: application/json"
```

Note: Replace `{id}` with an ID generated by `/receipts/process` endpoint

#### Response

```json
{ "points": 15 }
```

## Important Note:

Data does not survive an application restart. It uses in-memory solutions to track any data generated by these endpoints.
